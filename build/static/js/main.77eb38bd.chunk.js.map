{"version":3,"sources":["logo.svg","components/ItemList.component.jsx","components/AddItem.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","ItemList","props","items","removeItem","className","length","map","item","index","key","name","onClick","AddItem","state","error","itemName","createRef","handleSubmit","bind","e","preventDefault","this","current","value","id","Date","now","checkDuplicate","setState","find","item_index","filtered_items","filter","action","method","onSubmit","htmlFor","type","ref","placeholder","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,4LCgC5BC,G,YA9BA,SAACC,GACf,IACUC,EAAkBD,EAAlBC,MAAMC,EAAYF,EAAZE,WACb,OACI,yBAAKC,UAAU,aAAf,YAEI,0BAAMA,UAAU,yBAAyBF,EAAMG,OAA/C,YACA,2BAAOD,UAAU,cACb,+BACI,4BACI,kCACA,yCACA,wCAGR,+BACKF,EAAMI,KAAI,SAACC,EAAKC,GAAN,OACP,wBAAIC,IAAKD,GACL,4BAAKA,EAAM,GACX,4BAAKD,EAAKG,MACV,4BAAI,uBAAGC,QAAS,kBAAIR,EAAWK,IAAQJ,UAAU,cAA7C,eCwDjBQ,E,kDAzEX,aACC,IAAD,8BACI,gBACKC,MAAM,CACPX,MAAM,GACNY,MAAM,IAGV,EAAKC,SAASC,sBAEd,EAAKC,aAAa,EAAKA,aAAaC,KAAlB,gBAClB,EAAKf,WAAW,EAAKA,WAAWe,KAAhB,gBAVpB,E,yDAaaC,GAGT,GADAA,EAAEC,iBAC8B,IAA7BC,KAAKN,SAASO,QAAQC,MACzB,CACI,IAAMhB,EAAK,CACPiB,GAAGC,KAAKC,MACRhB,KAAKW,KAAKN,SAASO,QAAQC,OAG5BF,KAAKM,eAAeN,KAAKR,MAAMX,MAAMmB,KAAKN,SAASO,QAAQC,QAE1DF,KAAKO,SAAS,CAAC1B,MAAM,GAAD,mBAAKmB,KAAKR,MAAMX,OAAhB,CAAsBK,MAC1Cc,KAAKN,SAASO,QAAQC,MAAM,GAC5BF,KAAKO,SAAS,CAACd,MAAM,MAGrBO,KAAKO,SAAS,CAACd,MAAM,+BAIzBO,KAAKO,SAAS,CAACd,MAAM,4B,qCAIdZ,EAAMa,GAEjB,OADYb,EAAM2B,MAAK,SAAAtB,GAAI,OAAEA,EAAKG,MAAMK,O,iCASjCe,GACP,IAAMC,EAAeV,KAAKR,MAAMX,MAAM8B,QAAO,SAACzB,EAAKC,GAAN,OAAcA,GAAOsB,KAClET,KAAKO,SAAS,CACV1B,MAAM6B,M,+BAKV,OACI,yBAAK3B,UAAU,iBACX,0BAAM6B,OAAO,GAAGC,OAAO,OAAOC,SAAUd,KAAKJ,cACzC,2BAAOmB,QAAQ,IAAf,iBACA,0BAAMhC,UAAU,cAAciB,KAAKR,MAAMC,OACzC,yBAAKV,UAAU,cACX,2BAAOiC,KAAK,OAAOC,IAAMjB,KAAKN,SAAWwB,YAAY,YAAY7B,KAAK,SACtE,4BAAQ2B,KAAK,SAASjC,UAAU,cAAhC,SAGR,kBAAC,EAAD,CAAUF,MAAOmB,KAAKR,MAAMX,MAAOC,WAAYkB,KAAKlB,kB,GApE9CqC,aCUPC,MARf,WACE,OACE,yBAAKrC,UAAU,OACX,kBAAC,EAAD,QCGYsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5C,GACL6C,QAAQ7C,MAAMA,EAAM8C,c","file":"static/js/main.77eb38bd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport './styles/item-list.styles.css'\nconst ItemList=(props)=>\n{\n    const {items,removeItem}=props\n    return(\n        <div className=\"item-list\">\n            Item List\n            <span className=\"right-span total-item\">{items.length} Item(s)</span>\n            <table className=\"item-table\">\n                <thead>\n                    <tr>\n                        <th>Sl</th>\n                        <th>Item Name</th>\n                        <th>Action</th>\n                    </tr>\n                </thead>\n                <thead>\n                    {items.map((item,index)=>(\n                        <tr key={index}>\n                            <td>{index+1}</td>\n                            <td>{item.name}</td>\n                            <td><a onClick={()=>removeItem(index)} className=\"cancle-btn\">X</a></td>\n                        </tr>\n                    ))}\n                    \n                </thead>\n            </table>\n        </div>\n    )\n}\n\nexport default ItemList","import React, { Component, createRef} from 'react'\nimport './styles/add-items.styles.css'\nimport ItemList from './ItemList.component'\n\nclass AddItem extends Component{\n    constructor()\n    {\n        super()\n        this.state={\n            items:[],\n            error:''\n        }\n\n        this.itemName=createRef()\n\n        this.handleSubmit=this.handleSubmit.bind(this)\n        this.removeItem=this.removeItem.bind(this)\n    }\n\n    handleSubmit(e)\n    {\n        e.preventDefault()\n        if(this.itemName.current.value!='')\n        {\n            const item={\n                id:Date.now(),\n                name:this.itemName.current.value\n            }\n\n            if(this.checkDuplicate(this.state.items,this.itemName.current.value))\n            {\n                this.setState({items:[...this.state.items,item]})\n                this.itemName.current.value=''\n                this.setState({error:''})\n            }else\n            {\n                this.setState({error:'Item already added !!'}) \n            }\n        }else\n        {\n            this.setState({error:'Write an item name !!'})\n        }\n    }\n\n    checkDuplicate(items,itemName){\n        const exist=items.find(item=>item.name==itemName)\n        if(exist)\n        {\n            return false\n        }\n        return true\n    }\n\n\n    removeItem(item_index){\n        const filtered_items=this.state.items.filter((item,index)=>index!=item_index)\n        this.setState({\n            items:filtered_items\n        })\n    }\n\n    render(){\n        return(\n            <div className=\"add-item-form\">\n                <form action=\"\" method=\"post\" onSubmit={this.handleSubmit}>\n                    <label htmlFor=\"\">Add New Item </label>\n                    <span className=\"error-text\">{this.state.error}</span>\n                    <div className=\"form-items\">\n                        <input type=\"text\" ref={ this.itemName } placeholder=\"Item Name\" name=\"item\"/>\n                        <button type=\"submit\" className=\"submit-btn\">Add</button>\n                    </div>\n                </form>\n                <ItemList items={this.state.items} removeItem={this.removeItem}/>\n            </div>\n        )\n    }\n}\n\nexport default AddItem","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport AddItem from './components/AddItem.component';\nimport ItemList from './components/ItemList.component';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <AddItem/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}